{"version":3,"sources":["logo.svg","component/Article.jsx","component/Cart.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Article","props","Item","Image","size","src","Content","Header","as","name","Meta","available_quantity","Description","price","qty","Extra","Button","icon","floated","onClick","addOneArticle","Icon","removeArticle","Cart","amount","items","sum","Array","isArray","reduce","accumulator","currentValue","calculateAmount","Articles","map","item","removeArticleFromCart","article_id","addOneArticleToCart","Container","Group","divided","Divider","checkOut","App","state","cart","articles","newArticles","filter","setState","idx","findIndex","updateArticle","render","className","userInfo","user_id","length","status","article","fetch","res","json","console","error","order","_id","updatedArticles","update","method","headers","body","JSON","stringify","log","this","getOrdersPending","orders","promises","a","getArticles","Promise","all","detailedArticles","completedOrder","updateOrder","updatedCart","React","Component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.6faee8b0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport { Item, Image, Icon,  Button, Segment } from 'semantic-ui-react'\r\n\r\nconst Article = (props) => (\r\n    <Item>\r\n        <Item.Image size='tiny' src='https://react.semantic-ui.com/images/wireframe/image.png' />\r\n        <Item.Content>\r\n            <Item.Header as='a' >{props.name}</Item.Header>\r\n            <Item.Meta>\r\n                Availbility: {props.available_quantity}\r\n            </Item.Meta>\r\n            <Item.Description>\r\n                <p>Price: {props.price}$</p>\r\n                <p>Quantity: {props.qty}</p>\r\n            </Item.Description>\r\n        </Item.Content>\r\n        <Item.Extra>\r\n            <Button icon floated='right' onClick={()=> {props.addOneArticle()}}>\r\n                <Icon name='plus square' /> \r\n            </Button>\r\n            <Button icon floated='right' onClick ={() => { props.removeArticle()}}>\r\n                <Icon name='remove circle' />\r\n            </Button>\r\n        </Item.Extra>\r\n    </Item>\r\n\r\n);\r\n\r\nexport default Article;\r\n","import React from 'react';\r\nimport { Card, Item, Button, Container, Divider } from 'semantic-ui-react';\r\nimport Article from './Article';\r\n\r\nconst calculateAmount = items => {\r\n    let sum = 0;\r\n    if (Array.isArray(items)) {\r\n        sum = items.reduce((accumulator, currentValue) => {\r\n            const price = currentValue.price || 0;\r\n            const qty = currentValue.qty || 0;\r\n            return accumulator + price*qty;\r\n          }, 0);\r\n    }\r\n    return sum;\r\n}\r\n\r\nconst Cart = (props) => {\r\n    const amount = props.items ? calculateAmount(props.items) : 0;\r\n    const Articles = Array.isArray(props.items) ? \r\n        props.items.map(item => (\r\n            <Article \r\n                name={item.name}\r\n                available_quantity={item.available_quantity}\r\n                price={item.price}\r\n                qty={item.qty}\r\n                removeArticle={() => {\r\n                    props.removeArticleFromCart(item.article_id);\r\n                }}\r\n                addOneArticle={() => {\r\n                    props.addOneArticleToCart(item.article_id);\r\n                }}\r\n            ></Article>\r\n        )) : \r\n        [];\r\n    return (\r\n        <div>\r\n            <Container>\r\n                <Item.Group divided>\r\n                    {Articles}\r\n                </Item.Group>\r\n                \r\n            </Container>\r\n            <Divider></Divider>\r\n            <Container>\r\n                <p>Total Amount is $ {amount}</p>\r\n                <Button onClick={()=> props.checkOut()}>Checkout</Button>\r\n            </Container>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Cart;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Cart from './component/Cart';\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      user_id: \"5e4fde5d21146d12587ffd98\"\n    }\n  }\n  \n  // Retrieve single article information\n  async getArticles(article_id) {\n    let article = {};\n    if (article_id) {\n      try {\n        const res = await fetch(`/articles/${article_id}`)\n        article = await res.json();\n        return article;  \n      } catch (e) {\n        console.error(e);\n      }\n    }\n    return article;\n  }\n  // update order status\n  async updateOrder(order) {\n    let cart = order\n    if (order && order._id) {\n        // respect db schema of articles\n        const updatedArticles = Array.isArray(order.articles) ? order.articles.map(item => { return {\n          article_id: item.article_id,\n          qty: item.qty,\n        }}) : null;\n        const update = {\n          status: order.status,\n          articles: updatedArticles, \n        };\n        try {\n          const res = await fetch(`/orders/${order._id}`, {\n            method: 'PUT',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(update)\n          });\n          cart = await res.json();\n          return cart;\n        } catch (error) {\n          console.log(error)\n        }\n    }\n    return cart;\n  }\n  // get the order with status pending, basically the cart\n  async getOrdersPending(user_id) {\n  let cart = {};\n  if (user_id) {\n      try {\n        const res = await fetch(`/users/${user_id}/cart`)\n        return await res.json();\n      } catch (error) {\n        console.log(error)\n      }\n    }\n    return cart;\n  }\n  // fetch user info and cart when mount\n  async componentDidMount() {\n    if (this.state.user_id) {\n      const res = await fetch(`/users/${this.state.user_id}`);\n      const userInfo = await res.json();\n      let cart = {};\n      // retrieve cart\n      const orders = await this.getOrdersPending(this.state.user_id);\n      if (orders.length > 0){\n        cart = orders[0];\n        // retrieve articles \n        if (cart.articles && Array.isArray(cart.articles)) {\n          const promises = cart.articles.map(async (item) => {\n              const article = await this.getArticles(item.article_id);\n              return {\n                ...item,\n                ...article,\n              };\n          });\n          const detailedArticles = await Promise.all(promises);\n          cart.articles = detailedArticles;\n        }\n\n      }\n      \n      this.setState({\n          userInfo,\n          cart,\n      });\n    }\n  }\n  // remove article from the cart\n  removeArticleFromCart = (article_id) => {\n    if (this.state.cart && this.state.cart.articles && article_id) {\n      const cart = this.state.cart;\n      const articles = cart.articles;\n      if ( Array.isArray(articles)){\n        // non distruggo l'array di partenza\n        const newArticles = articles.filter(item => item.article_id !== article_id);\n        cart.articles = newArticles;\n        this.setState({\n          cart,\n        });\n      }\n    }\n  }\n  // add more quantity of an article to the cart\n  addOneArticleToCart = (article_id) => {\n    if (this.state.cart && this.state.cart.articles && article_id) {\n        let articles = this.state.cart.articles;\n        const idx = articles.findIndex(item => item.article_id === article_id);\n        if (idx !== -1 ) {\n          const updateArticle = articles[idx];\n          updateArticle.qty = articles[idx].qty + 1;\n          articles[idx] = updateArticle;\n          this.setState({\n            cart: {\n              ...this.state.cart,\n              articles,\n            }\n          });\n        }\n    }\n  }\n  // checking out: send an update order to the server\n  async checkOut() {\n      if (this.state.cart) {\n        const cart = this.state.cart\n        const completedOrder = {\n          ...cart,\n          status: 'sold' \n        }\n        const updatedCart = await this.updateOrder(completedOrder);\n        this.setState({\n          cart: updatedCart,\n        });\n      }\n  }\n\n  render = () => {\n    const controlCart = () => {\n      if (this.state.cart && this.state.cart.articles && (this.state.cart.articles.length > 0) && this.state.cart.status === 'pending'){\n        return (\n          <Cart \n            items={this.state.cart && this.state.cart.articles}\n            addOneArticleToCart={this.addOneArticleToCart}\n            removeArticleFromCart={this.removeArticleFromCart}\n            checkOut={() => this.checkOut()}\n          ></Cart>\n        )\n      }\n      return (\n        <h2>Your Cart is Empty</h2>\n      )\n    }\n    return (\n      <div className=\"App\">\n          <h1>\n            Hello user {(this.state.userInfo && this.state.userInfo.name) || this.state.user_id}\n          </h1>\n          { controlCart() }\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}